- hosts: all
  become: true
  vars:
    docker_network_name: "Docker_network"
    jenkins_master_ip: "172.3.27.7"
    jenkins_agent_ip: "172.3.27.8"
    jenkins_url: "http://192.168.168.7:8080/"
    kind_cluster_name: "monitoring-webapp-cluster"
    kubeconfig_path: "/tmp/kubeconfig"
    jenkins_agent_secret: "aca2402ef832a322d27cc8d4f1f95a92ad310ac2c603da3aa8118a0000b38951"

  tasks:

    - name: Package list update
      package:
        update_cache: yes

    - name: Ensure pip is installed
      package:
        name: python3-pip
        state: present

    - name: Install Python 'requests'
      pip:
        name: requests

    - name: Add Docker repository
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      when: ansible_os_family == "RedHat"

    - name: Install Docker
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
      when: ansible_os_family == "RedHat"

    - name: Start Docker
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Create Docker network
      docker_network:
        name: "{{ docker_network_name }}"
        driver: bridge
        ipam_config:
          - subnet: 172.3.27.0/24

    - name: Install Kind
      shell: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        mv ./kind /usr/local/bin/kind
      args:
        creates: /usr/local/bin/kind

    - name: Create Kind configuration file
      copy:
        dest: /tmp/kind-config.yaml
        content: |
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            apiServerPort: 6443

    - name: Check if Kind cluster exists
      shell: kind get clusters
      register: kind_clusters
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Create Kind cluster if not exists
      command: kind create cluster --name {{ kind_cluster_name }} --config /tmp/kind-config.yaml
      when: "'{{ kind_cluster_name }}' not in kind_clusters.stdout"
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin"

    - name: Wait for Kind cluster API to be available
      wait_for:
        host: 127.0.0.1
        port: 6443
        delay: 10
        timeout: 120

    - name: Create Docker volume for Jenkins data
      community.docker.docker_volume:
        name: jenkins_data

    - name: Create Jenkins Master container
      community.docker.docker_container:
        name: Jenkins_Master_Container
        image: jenkins/jenkins:lts
        state: started
        user: root
        restart_policy: always
        ports:
          - "8080:8080"
          - "50000:50000"
        networks:
          - name: "{{ docker_network_name }}"
            ipv4_address: "{{ jenkins_master_ip }}"
        volumes:
          - jenkins_data:/var/jenkins_home
          - /var/run/docker.sock:/var/run/docker.sock
        privileged: true

    - name: Create Jenkins Agent container
      community.docker.docker_container:
        name: Jenkins_Agent_Container
        image: jenkins/inbound-agent:latest
        state: started
        restart_policy: always
        networks:
          - name: "{{ docker_network_name }}"
            ipv4_address: "{{ jenkins_agent_ip }}"
        env:
          JENKINS_URL: "{{ jenkins_url }}"
          JENKINS_SECRET: "{{ jenkins_agent_secret }}"
          JENKINS_AGENT_NAME: "Agent"
          JENKINS_AGENT_WORKDIR: /home/jenkins
        privileged: true
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

    - name: Set permissions for Docker socket in Jenkins Agent
      community.docker.docker_container_exec:
        container: Jenkins_Agent_Container
        command: chown root:jenkins /var/run/docker.sock
        user: root
        tty: true

    - name: Install kubectl in Jenkins Agent
      community.docker.docker_container_exec:
        container: Jenkins_Agent_Container
        command: >
          sh -c '
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s -L https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl" &&
          chmod +x kubectl &&
          mv kubectl /usr/local/bin/kubectl
          '
        user: root
        tty: true

    - name: Install Helm in Jenkins Agent
      community.docker.docker_container_exec:
        container: Jenkins_Agent_Container
        command: >
          sh -c '
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 &&
          chmod 700 get_helm.sh &&
          ./get_helm.sh
          '
        user: root
        tty: true

    - name: Create .kube directory in Jenkins Agent
      community.docker.docker_container_exec:
        container: Jenkins_Agent_Container
        command: mkdir -p /home/jenkins/.kube
        user: jenkins

    - name: Replace localhost in kubeconfig with Jenkins Master IP
      replace:
        path: /root/.kube/config
        regexp: 'server: https://127\.0\.0\.1:6443'
        replace: "server: https://{{ jenkins_master_ip }}:6443"
      become: true

    - name: Read kubeconfig from /root/.kube/config
      slurp:
        src: /root/.kube/config
      register: kubeconfig_encoded
      become: true

    - name: Write kubeconfig to temporary path
      copy:
        content: "{{ kubeconfig_encoded.content | b64decode }}"
        dest: "{{ kubeconfig_path }}"

    - name: Copy kubeconfig into Jenkins Agent container
      command: docker cp {{ kubeconfig_path }} Jenkins_Agent_Container:/home/jenkins/.kube/config

    - name: Set permissions for kubeconfig
      community.docker.docker_container_exec:
        container: Jenkins_Agent_Container
        command: chown jenkins:jenkins /home/jenkins/.kube/config
        user: root

    - name: Remove temporary kubeconfig
      file:
        path: "{{ kubeconfig_path }}"
        state: absent
